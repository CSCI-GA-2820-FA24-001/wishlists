name: CI Build
on:
  push:
    branches:
      - master
    paths-ignore:
    - 'README.md'

  pull_request:
    branches:
      - master
    paths-ignore:
    - 'README.md'

jobs:
  build:
    runs-on: ubuntu-latest
    container: python:3.11-slim

    # Required services    
    services:
      # Label used to access the service container
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: pgs3cr3t
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Steps for the build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          python -m pip install poetry==1.7.1
          # This version restriction is referenced from:
          # https://github.com/CSCI-GA-2820-FA24-001/products/pull/44/commits/019cd580f217e8966407980b7ce2887e4ffecade
          # python -m pip install psycopg2-binary
          poetry config virtualenvs.create false
          poetry lock --no-update
          poetry install

      - name: Run Code Quality Checks
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 service tests --count --select=E9,F63,F7,F82 --show-source --statistics
          # check for complexity. The GitHub editor is 127 chars wide
          flake8 service tests --count --max-complexity=10 --max-line-length=127 --statistics
          # Run pylint on the service
          pylint service tests --max-line-length=127

      - name: Run unit tests with PyTest
        run: |
          pytest --pspec --cov=service --cov-fail-under=95 --disable-warnings
        env:
          FLASK_APP: wsgi:app
          DATABASE_URI: "postgresql://postgres:postgres@localhost:5432/testdb"

      - name: Upload code coverage
        uses: codecov/codecov-action@v3.1.4
        with:
          token: ${{ secrets.CODECOV_TOKEN }} 